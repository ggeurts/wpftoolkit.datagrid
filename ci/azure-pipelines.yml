# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master
- develop

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  versionPrefix: 3.5.0

  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    prVersionLabel: 'pr$(System.PullRequest.PullRequestNumber)'
    prVersionSuffix: '-$(prVersionLabel)-'
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/head/release') }}:
    branchVersionLabel: 'rc'
    branchVersionSuffix: -$(branchVersionLabel)
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/head/hotfix') }}:
    branchVersionLabel: 'rc'
    branchVersionSuffix: -$(branchVersionLabel)
  ${{ if ne(variables['Build.SourceBranch'], 'refs/head/master') }}:
    branchVersionLabel: 'dev'
    branchVersionSuffix: -$(branchVersionLabel)
  versionLabel: $[ coalesce(variables.prVersionLabel, variables.branchVersionLabel) ]
  versionSuffix: $[ coalesce(variables.prVersionSuffix, variables.branchVersionSuffix) ]
  versionCounterName: '$(versionPrefix)$(versionSuffix)'
  versionRevision: $[ counter(variables.versionCounterName, 0) ]
  version: '$(versionPrefix).$(versionRevision)'
  semanticVersion: '$(versionPrefix)$(versionSuffix)$(versionRevision)'

steps:
- task: NuGetToolInstaller@0
  displayName: Install NuGet tools

- task: DeleteFiles@1
  displayName: Clean
  inputs:
    sourceFolder: '$(projectSourceDir)'
    contents: |
      **/bin/**/*.*
      **/obj/**/*.*

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: MSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArguments: >
      -p:VersionPrefix="$(versionPrefix)"
      -p:VersionLabel="$(versionLabel)"
      -p:VersionRevision="$(versionRevision)"
      -p:Version="$(semanticVersion)"

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CopyFiles@2
  displayName: 'Deliver NuGet packages'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/bin/$(buildConfiguration)/?*.nupkg'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'build-$(buildConfiguration)-$(version)'

- task: NuGetCommand@2
  displayName: 'Publish NuGet packages'
  condition: >
    and
    ( succeeded()
    , or
      ( in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/develop')
      , startswith(variables['Build.SourceBranch'], 'refs/heads/release-')
      , startswith(variables['Build.SourceBranch'], 'refs/heads/hotfix-')
      )
    )
  inputs:
    command: push
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nuget.org'
